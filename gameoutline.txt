- init window with 0
- determine the height of the display and set 4:3 dimension, update game screen
- track original display height
- use original display height to determine scale factor
- determine player speed
    - apply scaling factor (assume this will be needed for all entities)
    - apply scaling to player rectangle
    - up/down is about 4 secs to cross the game field.
- make the game field
    - top padding (percent)
    - bottom padding (percent)
    - game field dimensions
- load a player make it a sprite/texture
    - attempt to change / animate the colors in the player
    - tried using pixels, got this to work, but waaaaay too much work
    - split the texture from the image, had the shader work on anything > 0.0 alpha
- shooting
    - need to track 8 directions
    - limit to 4 bullets active in each direction, 32 active bullets in theory
    - bullet speed
    - each bullet
        - start pos (Vec2)
        - direction
        - current Pos (Vec2)
        - origin is the center of the player at the time of shot.
    - draw the bullet
        - a series of lines from drawEnd to drawStart
        - drawEnd is the front of the shot
- sprites
    - create an enum for the sprites
    - create an actor structure with the topleft and lower right rectangle coordinates
    - position using the center position and set the RTL and RBR with a function
- shot collision detection
    - concerned with ordering, need to get the closest 1st.
    - rewrote, gatherActorsByLine in actor master finds any actors that intersected the shot geometery
    - once there is an intersection, if only 1 then pixel compare.
- shot rendering fixes
    - need to continue drawing shot as shot start moves to shot end.
    - adding status, ACTIVE, INACTIVE, REMOVING
    - fixed issue
- restructure player
    - create draw routine for player
    - move shader into player
    - load the images and textures in player
    - create a color change status that is abstracted
- plan for handling mulitple textures/images/masks for actors
    - need to change image for player when direction is changed
    - need different masks for GPU shaders
    - need to consider potentional for animation as well.
        - input number of frames in the texture
        - width/frames * pos is the position for the animation
    - we don't want to have images held in the actor structure, should still be package level variable.
- moving actors
    - starting with Grunt.
    - need to understand how to up its speed progressively, x number of speeds.
    - the grunt needs to seek the player.  Moving diagonally until it get to the same level and then progressively homing in.
    - top speed is the speed of the player.

    

        
